---
title: "PrioritizR"
format: html
editor: visual
---

Please contact sarahhalperin\@u.boisestate.edu if you have any questions. The code will need to be modified based on how you bring in the data.

## prioritizR

Systematic Conservation Prioritization in R: https://prioritizr.net/

Citation: Hanson JO, Schuster R, Morrell N, Strimas-Mackey M, Edwards BPM, Watts ME, Arcese P, Bennett J, Possingham HP (2022). prioritizr: Systematic Conservation Prioritization in R. R package version 7.2.2. Available at [https://CRAN.R-project.org/package=prioritizr](https://cran.r-project.org/package=prioritizr).

## Load Packages

```{r}
#install.packages("prioritizr", repos = "https://cran.rstudio.com/")
library(prioritizr)

#install.packages('/Library/gurobi952/macos_universal2/R/gurobi_9.5-2_R_4.2.0.tgz', repos=NULL)
library(gurobi)
library(ggplot2)
library(dplyr)
library(terra)
library(raster)
library(reshape)
library(sf)
library(patchwork)
library(ggnewscale)
library(knitr)
library(viridis)
library(wesanderson)



source("get_optim_function.R") #save in same folder as this script 


```

## Load Data

```{r}
Folder<-"/Volumes/JodiBrandt/Common/SarahHalperin/" #Base Folder 

#---------------------------------------#
#Study Area
StudyArea<-st_read(paste0(Folder, "Data/StudyArea/StudyArea_wgs84.shp"))
StudyArea.sf<-st_transform(StudyArea, "epsg:5070")
#---------------------------------------#
new.ras<-terra::rast(xmin=-1674495, xmax=-1594155, ymin=2404755,ymax=2505645, resolution=1000, crs=crs(StudyArea.sf)) #Base raster for resampling and projecting 


#---------------------------------------#
#Productivity, Versatility, Resilience
PVR_TV<-terra::rast(paste0(Folder, "/Data/AFT_Data/PVR_TV.tif")) #load food production potential data and agricultural land quality data

PVR_TV.rs<-terra::resample(PVR_TV,new.ras, method="bilinear") #resample to 1km2 and reproject 
PVR_TV.p<-terra::project(PVR_TV.rs, "epsg:5070") 

PVR_TV.s<-PVR_TV.p #use for spatraster 

df_PVR<-as.data.frame(PVR_TV.s, xy=TRUE)

#plot food production potential 
PVRplot<-ggplot(df_PVR, aes(x = x, y = y, fill =PVR)) +
    geom_tile() +
    theme(
      panel.background =element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      axis.title = element_blank()
    ) +
    scale_fill_viridis(limits=c(0,1))+
  labs(fill = "Food Production Potential")

#---------------------------------------#

#---------------------------------------#
#Agricultural Land Quality 
#Reclassify to get Low, medium, high Ag quantity (1/3 quantiles)
Quantile<-global(PVR_TV.s, fun=quantile, na.rm=TRUE)
AgQuality<-PVR_TV.s
reclass<-c(0,0.21,1, 0.21,0.49,2, 0.49,1,3)
reclass<-matrix(reclass, ncol=3, byrow=TRUE)

AgQuality.r<-classify(AgQuality, reclass, include.lowest=FALSE)

df_agquality<-as.data.frame(AgQuality.r, xy=TRUE)
df_agquality<-na.omit(df_agquality)

#plot agricultural land quality 
AgQualityPlot<-ggplot(df_agquality, aes(x = x, y = y, fill =PVR)) +
    geom_tile() +
    theme(
      panel.background =element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      axis.title = element_blank()
    ) +
    scale_fill_viridis(limits=c(0,3))+
  labs(fill = "Agricultural Land Quality")

Ag_plots<-PVRplot+AgQualityPlot
#---------------------------------------#

#Agricultural land 
#----------------------------------------#
#Mask to measure total cultivated land protected 
mask.file<-"/Volumes/JodiBrandt/Common/SarahHalperin/Data/LandUse/TV_NLCD/NLCD_Weighted/TV.NLCD_2016w.tif"


#resample and project 

mask<-terra::rast(mask.file)

mask<-terra::resample(mask, new.ras, method="near")

mask<-terra::project(mask, "EPSG:5070")

#select ag land 
mask[is.nan(mask)]<-NA
mask[mask == 81]<-1
mask[mask == 82] <-1
mask[mask!=1]<-NA

#---------------------------------------#
#Ecosystem Services 
ES_List<-list.files(paste0(Folder, "Data/ES_Spatial_Layers"), pattern="*2016.tif", full.names=TRUE) #Bring in ES Data 

ES_rast<-lapply(ES_List, function (x){
    terra::rast(x)
})

ES_rast.p<-lapply(ES_rast, function (x){
  terra::project(x, crs(new.ras))
})

ES_rast1km<-lapply(ES_rast.p, function(x){
 terra::resample(x,new.ras, method="bilinear") #resample to 1km 
})


ES_rast1km.c<-lapply(ES_rast1km, function(x){
  terra::crop(x, PVR_TV.p)
}) #crop to PVR. 

ES_rast1km.c<-lapply(ES_rast1km.c, function(x){
  terra::mask(x, PVR_TV.p)
})#mask to PVR. Optimization restricted to areas that are agricultural land 

ES_rast1km.r<-lapply(ES_rast1km.c, function(x){
  raster::raster(x) #turn into raster 
})

```

```{r}
#------------------------------------#
# Plot ES inputs 
raster_list<-list(ES_rast1km.r[[1]], ES_rast1km.r[[3]], ES_rast1km.r[[4]], ES_rast1km.r[[6]]) 


# Create a vector of new layer names
layer_names_list <- c("CarbonSequestration", "HabitatQuality", "NitrogenRetention", "Recreation")

# Use a for loop to rename the layer names of each raster in the list
for (i in 1:length(raster_list)) {
  names(raster_list[[i]]) <- layer_names_list[[i]]
}

#plot carbon
  df.carbon <- as.data.frame(raster_list[[1]], xy = TRUE)
 df.carbon<-na.omit(df.carbon)
carbon<-ggplot(df.carbon, aes(x = x, y = y, fill =CarbonSequestration)) +
    geom_tile() +
    theme(
      panel.background = element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      axis.title = element_blank()
    ) +
    scale_fill_viridis(limits=c(3,15))+
  labs(fill = "Carbon Sequestration \n(Mg ha-1)")+
  theme(legend.margin = margin(0, 0, 0, 0))

#plot Habitat Quality 
 df.habitat <- as.data.frame(raster_list[[2]], xy = TRUE)
 df.habitat<-na.omit(df.habitat)
habitat<-ggplot(df.habitat, aes(x = x, y = y, fill =HabitatQuality)) +
    geom_tile() +
    theme(
      panel.background =element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      axis.title = element_blank()
    ) +
    scale_fill_viridis(limits=c(0,1))+
  labs(fill = "Habitat Quality")
    
#plot Nitrogen 
 df.nitrogen <- as.data.frame(raster_list[[3]], xy = TRUE)
 df.nitrogen<-na.omit(df.nitrogen)
nitrogen<-ggplot(df.nitrogen, aes(x = x, y = y, fill =NitrogenRetention)) +
    geom_tile() +
    theme(
      panel.background =element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      axis.title = element_blank()
    ) +
    scale_fill_viridis(limits=c(0,1))+
  labs(fill = "Nitrogen Retention\n(Proportion Nitrogen Load Retained)")

#plot Recreation
 df.recreation <- as.data.frame(raster_list[[4]], xy = TRUE)
 df.recreation<-na.omit(df.recreation)
recreation<-ggplot(df.recreation, aes(x = x, y = y, fill =Recreation)) +
    geom_tile() +
    theme(
      panel.background =element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      axis.title = element_blank()
    ) +
    scale_fill_viridis(name="Recreation", limits=c(0,1))


plot_list<-list(carbon, habitat, nitrogen, recreation)

plots <- lapply(plot_list, wrap_plots, nrow = 1)
reduce_plots <- wrap_plots(plots)
print(reduce_plots)

library(cowplot)
plotgrid<-plot_grid(carbon, habitat, nitrogen, recreation, ncol=2, align="hv")
#---------------------------------------#
```

```{r}
#https://datadryad.org/stash/dataset/doi:10.5061/dryad.np5hqbzq9
#---------------------------------------#
#Cost Data (Nolte 2020)
Cost_US<-terra::rast(paste0(Folder,"/Data/LandUse/cost_places/places_fmv_all.tif"))

Cost_US<-terra::project(Cost_US, "epsg:5070")

Cost_US<-terra::resample(Cost_US, new.ras, method="sum") #resample to 1km (should this be sum?)

#Crop to PVR
Cost_TV<-terra::crop(Cost_US, PVR_TV.p)
Cost_TV<-terra::mask(Cost_TV, PVR_TV.p)

#Cost_1km<-raster(Cost_TV)
cost<-Cost_TV

names(cost)<-"cost"

cost<-cost/10 #convert to million usd/1km 


#---------------------------------------#
#plot cost 
df.cost <- as.data.frame(cost, xy = TRUE)
#Plot cost data 
  cost.plot<-ggplot() +
    geom_tile(data=df.cost, aes(x = x, y = y, fill =cost)) +
    scale_fill_gradientn(name="USD / kmÂ²", colours = terrain.colors(10))+ 
    new_scale_fill()+
  geom_sf(data = StudyArea.sf, fill = NA, color = "black", size = 1) +
  theme(
    panel.background = element_blank(),
    panel.border = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank()
  )

```

```{r}
#---------------------------------------#
#Plot current cultivated land (mask)
df.mask<-as.data.frame(mask, xy=TRUE)
  mask.plot<-ggplot() +
    geom_tile(data=df.mask, aes(x = x, y = y, fill ="TV.NLCD_2016w")) +
    scale_fill_manual(values="#788f33", name="Current Agricultural Land", labels=c(""))+
  new_scale_fill()+
  geom_sf(data = StudyArea.sf, fill = NA, color = "black", size = 1) +
  theme(
    panel.background = element_blank(),
    panel.border = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank()
  )

```

```{r}
#-------------------------------------#
#Locked in/out layer (restrict optimization to unprotected lands)

Protected.area<-st_read(paste0(Folder, "Data/HabitatQuality_Data/GAP/PADUS2_1Designation_StateID.shp")) #protected lands data for idaho 

PA<-Protected.area %>%
  subset(Protected.area$GAP_Sts < "3")

PA.tv<-st_intersection(PA, StudyArea.sf)

PA.tv.p<-st_cast(PA.tv, "POLYGON") #needed to convert to polygon 

PA.tv.r<-rasterize(PA.tv.p, new.ras, "GAP_Sts")
values(PA.tv.r)[values(PA.tv.r) <= 2] <- 1


#locked.in<-PA.tv.r
locked.out<-PA.tv.r

#------------------------------------------#
#Plot protected areas 
df.PA<-as.data.frame(PA.tv.r, xy=TRUE)

PA.plot<-ggplot() +
  geom_tile(data=df.PA, aes(x = x, y = y, fill = "GAP_Sts")) +
    scale_fill_manual(values="#788f33", name="Current Protected Areas", labels=c(""))+
  new_scale_fill()+
  geom_sf(data = StudyArea.sf, fill = NA, color = "black", size = 1) +
  theme(
    panel.background = element_blank(),
    panel.border = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank()
  )

```

## Set targets

```{r}
#--------------------------------------#
#Set targets  
targets<-seq(0,0.4,0.05)
```

## Create ES Conservation Inputs

```{r}
#---------------------------------------#
#Create ES Conservation Inputs 
ES_inputs.pvr<-rast(list(ES_rast1km.c[[1]], ES_rast1km.c[[3]], ES_rast1km.c[[4]], ES_rast1km.c[[6]], PVR_TV.s))

#Carbon_inputs<-rast(list(ES_rast1km.c[[1]], PVR_TV.s))
Carbon_inputs<-rast(list(ES_rast1km.c[[1]]))

#Habitat_inputs<-rast(list(ES_rast1km.c[[3]], PVR_TV.s))
Habitat_inputs<-rast(list(ES_rast1km.c[[3]]))
#---------------------------------------#

```

## Solution ES problem

```{r}
set.seed(123)

# set cost of locked in areas to 0
cost[locked.out==1] <- 0

#

solutions <- generate_optim(inputs=ES_inputs.pvr, cost=cost, targets=targets, mask=mask,
                            locked.out = locked.out,
                            output.table=TRUE, output.rasters=TRUE,
                            table.columns = c("total_cost","percent_ES_protected","total_pixels","percent_mask_pixels_in_solution"))


solution30<-solutions[[2]][[7]]
solution30[solution30 ==0]<-NA

#writeRaster(solution30, paste0(Folder, "Chapter3/SolutionRasters/Solution_CombinedScenario.tif"), overwrite=TRUE)

sol.table <- solutions[[1]]

# Table modifications
sol.table$cost_bil <- sol.table$total_cost/1000
sol.table[,stringr::str_which(names(sol.table),"target")] <- sol.table[,stringr::str_which(names(sol.table),"target")]*100
sol.table$total_pixels_mask <- sol.table$percent_mask_pixels_in_solution/100 * subset(freq(mask), freq(mask)[,"value"]==1)[,"count"]


#write.csv(sol.table, paste0(Folder,"Chapter3/OutputTables/SolTableCombined.csv"))

```

## Solution PVR Problem

```{r}
# set cost of locked out areas to 0
cost[locked.out==1] <- 0

#
solutions.pvr <- generate_optim(inputs=PVR_TV.s, cost=cost, targets=targets, mask=mask,
                            locked.out=locked.out,
                            output.table=TRUE, output.rasters=TRUE,
                            table.columns = c("total_cost","percent_ES_protected","total_pixels","percent_mask_pixels_in_solution"))


solution30.pvr<-solutions.pvr[[2]][[7]]
solution30.pvr[solution30.pvr ==0]<-NA

#writeRaster(solution30.pvr, paste0(Folder, "Chapter3/SolutionRasters/Solution_AgScenario.tif"), overwrite=TRUE)



sol.table.pvr <- solutions.pvr[[1]]

# Table modifications
sol.table.pvr$cost_bil <- sol.table.pvr$total_cost/1000
sol.table.pvr[,stringr::str_which(names(sol.table.pvr),"target")] <- sol.table.pvr[,stringr::str_which(names(sol.table.pvr),"target")]*100
sol.table.pvr$total_pixels_mask <- sol.table.pvr$percent_mask_pixels_in_solution/100 * subset(freq(mask), freq(mask)[,"value"]==1)[,"count"]

#write.csv(sol.table.pvr, paste0(Folder,"Chapter3/OutputTables/SolTableAG.csv"))
```

## Solution Climate Problem

```{r}
#
solutions.carbon <- generate_optim(inputs=Carbon_inputs, cost=cost, targets=targets, mask=mask,
                            locked.out=locked.out,
                            output.table=TRUE, output.rasters=TRUE,
                            table.columns = c("total_cost","percent_ES_protected","total_pixels","percent_mask_pixels_in_solution"))

solution30.carbon<-solutions.carbon[[2]][[7]]
solution30.carbon[solution30.carbon ==0]<-NA

#writeRaster(solution30.carbon, paste0(Folder, "Chapter3/SolutionRasters/Solution_ClimateScenario.tif"), overwrite=TRUE)

sol.table.carbon <- solutions.carbon[[1]]

# Table modifications
sol.table.carbon$cost_bil <- sol.table.carbon$total_cost/1000
sol.table.carbon[,stringr::str_which(names(sol.table.carbon),"target")] <- sol.table.carbon[,stringr::str_which(names(sol.table.carbon),"target")]*100
sol.table.carbon$total_pixels_mask <- sol.table.carbon$percent_mask_pixels_in_solution/100 * subset(freq(mask), freq(mask)[,"value"]==1)[,"count"]

#write.csv(sol.table.carbon, paste0(Folder,"Chapter3/OutputTables/SolTableCarbon.csv"))

```

## Solution Habitat Problem

```{r}
#
solutions.habitat <- generate_optim(inputs=Habitat_inputs, cost=cost, targets=targets, mask=mask,
                            locked.out=locked.out,
                            output.table=TRUE, output.rasters=TRUE,
                            table.columns = c("total_cost","percent_ES_protected","total_pixels","percent_mask_pixels_in_solution"))

solution30.habitat<-solutions.habitat[[2]][[7]]
solution30.habitat[solution30.habitat ==0]<-NA

#writeRaster(solution30.habitat, paste0(Folder, "Chapter3/SolutionRasters/Solution_HabitatScenario.tif"), overwrite=TRUE)

sol.table.habitat <- solutions.habitat[[1]]

# Table modifications
sol.table.habitat$cost_bil <- sol.table.habitat$total_cost/1000
sol.table.habitat[,stringr::str_which(names(sol.table.habitat),"target")] <- sol.table.habitat[,stringr::str_which(names(sol.table.habitat),"target")]*100
sol.table.habitat$total_pixels_mask <- sol.table.habitat$percent_mask_pixels_in_solution/100 * subset(freq(mask), freq(mask)[,"value"]==1)[,"count"]

#write.csv(sol.table.habitat, paste0(Folder,"Chapter3/OutputTables/SolTableHabitat.csv"))
```

## Bar graph total cultivated land for each solution

```{r}
sol.table.pvr.30 <-sol.table.pvr %>%
  filter(target == "30")
sol.table.30 <-sol.table %>%
  filter(target == "30")
sol.table.carbon.30 <-sol.table.carbon %>%
  filter(target == "30")
sol.table.habitat.30 <-sol.table.habitat %>%
  filter(target == "30")

df.totalag<-as.data.frame(cbind(sol.table.pvr.30$percent_mask_pixels_in_solution, sol.table.30$percent_mask_pixels_in_solution, sol.table.carbon.30$percent_mask_pixels_in_solution, sol.table.habitat.30$percent_mask_pixels_in_solution))

df.totalag<-as.data.frame(t(na.omit(df.totalag)))
df.totalag$Scenario<-c("Agricultural Productivity", "Combined Ecosystem Services", "Climate Adaptation", "Wildlife Habitat")
colnames(df.totalag)<-c("Percent", "Scenario")

df.totalag$Scenario<-factor(df.totalag$Scenario, levels=c("Agricultural Productivity", "Climate Adaptation", "Wildlife Habitat", "Combined Ecosystem Services"))

#Plot Percent cultivated Land 
AgLand<-ggplot(df.totalag, aes(x = Scenario)) +
  geom_bar(aes(y = Percent), stat = "identity", position = "dodge", fill="#aeac4c") +
  labs(x = "Protection Scenario", y = "Percent Agricultural Land (%)") +
  theme_classic()+
    theme(
    axis.text = element_text(size = 12),  # Adjust the font size for tick labels
    axis.title = element_text(size = 14)  # Adjust the font size for axis titles
  )
```

## Calculate Cost

```{r}
df.cost<-as.data.frame(cbind( sol.table.pvr$cost_bil, sol.table$cost_bil,sol.table.carbon$cost_bil, sol.table.habitat$cost_bil))

colnames(df.cost)<-c("Agricultural Productivity","Combined Ecosystem Services", "Climate", "Wildlife Habitat")
df.cost$Target<-c(0,5,10,15,20,25,30,35,40)

df.cost.melt<-melt(df.cost, id="Target")


#Plot cost 
Costplot<-ggplot(df.cost.melt) +
  geom_line(aes(x=Target, y=value, color=variable)) +
  geom_point(aes(x=Target, y=value, color=variable)) +
   scale_x_continuous(name="Protection Target (%)", breaks=seq(0,40,5)) +
  scale_y_continuous(name="Total Cost (billion USD)", breaks=seq(0,5,0.5))+
  labs(colour = "Protection Scenario")+
  geom_vline(xintercept = 30, linetype = "dashed", color = "black")+
  scale_color_viridis_d()+
  theme_classic()+
  theme(
    axis.text = element_text(size = 12),   # Adjust the font size for tick labels
    axis.title = element_text(size = 14)   # Adjust the font size for axis titles
  )

```

## Calculate Agricultural Land Quality Percent

```{r}
#---------------------------------------#
solutions.r<-lapply(solutions[[2]], function(x){ 
                    raster::raster(x)
  }) 

solutions.pvr.r<-lapply(solutions.pvr[[2]], function(x){ 
                    raster::raster(x)
  }) 

solutions.carbon.r<-lapply(solutions.carbon[[2]], function(x){ 
                    raster::raster(x)
  }) 

solutions.habitat.r<-lapply(solutions.habitat[[2]], function(x){ 
                    raster::raster(x)
  }) 

#----------------------------------------------------#
AgQuality.r<-raster::raster(AgQuality.r)

stack.ES<-stack(solutions.r)
stack.pvr<-stack(solutions.pvr.r)
stack.carbon<-stack(solutions.carbon.r)
stack.habitat<-stack(solutions.habitat.r)


stack.q<-stack(stack.ES, stack.pvr,stack.carbon,stack.habitat, AgQuality.r)
df.q<-as.data.frame(na.omit(values(stack.q))) 

Tot.pix<-t(df.q[1:36] %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))))
variable <- rownames(Tot.pix)
  rownames(Tot.pix) <- NULL
  Tot.pix <- as.data.frame(cbind(Tot.pix,variable))

df.q.melt<-melt(df.q, id="PVR")
df.q.aggregate<-aggregate(value ~ PVR + variable, data=df.q.melt, FUN=sum)

df.q.aggregate<-left_join(df.q.aggregate, Tot.pix, by="variable")
df.q.aggregate$Perc_Quality<-df.q.aggregate$value/as.numeric(df.q.aggregate$V1)*100

df.quality.combined<-na.omit(df.q.aggregate[c(1,2,5)])
colnames(df.quality.combined)<-c("Quality", "Target", "Perc_Quality")

df.quality.combined<-df.quality.combined %>%
  mutate(Target=recode(Target, 
                       'cost.2.1'="Combined 5%",
                       'cost.3.1'="Combined 10%",
                       'cost.4.1' = "Combined 15%", 
                       'cost.5.1' = "Combined 20%", 
                       'cost.6.1' ="Combined 25%",
                       'cost.7.1' ="Combined 30%",
                       'cost.8.1'="Combined 35%", 
                       'cost.9.1'="Combined 40%", 
                        'cost.2.2'="PVR 5%",
                       'cost.3.2'="PVR 10%",
                       'cost.4.2' = "PVR 15%", 
                       'cost.5.2' = "PVR 20%", 
                       'cost.6.2' ="PVR 25%",
                       'cost.7.2' ="PVR 30%",
                       'cost.8.2'="PVR 35%", 
                       'cost.9.2'="PVR 40%", 
                        'cost.2.3'="Carbon 5%",
                       'cost.3.3'="Carbon 10%",
                       'cost.4.3' = "Carbon 15%", 
                       'cost.5.3' = "Carbon 20%", 
                       'cost.6.3' ="Carbon 25%",
                       'cost.7.3' ="Carbon 30%",
                       'cost.8.3'="Carbon 35%", 
                       'cost.9.3'="Carbon 40%", 
                        'cost.2.4'="Habitat 5%",
                       'cost.3.4'="Habitat 10%",
                       'cost.4.4' = "Habitat 15%", 
                       'cost.5.4' = "Habitat 20%", 
                       'cost.6.4' ="Habitat 25%",
                       'cost.7.4' ="Habitat 30%",
                       'cost.8.4'="Habitat 35%", 
                       'cost.9.4'="Habitat 40%")) %>%
  mutate(Quality=recode(Quality, 
                        '1'="Low", 
                        '2'="Medium",
                        '3'="High")) %>%
  mutate(Perc_Quality=round(Perc_Quality, digits=2))

write.csv(df.quality.combined, paste0(Folder,"Chapter3/OutputTables/SolutionAgQuality.csv"))

#---------------------------------------#
```

## Agricultural Land Quality Bar Graphs

```{r}
library(stringr)
df.quality.30<- df.quality.combined %>%
  filter(str_ends(Target, "30%"))

# Reorder the "Quality" variable
df.quality.30$Quality <- factor(df.quality.30$Quality, levels = c("Low", "Medium", "High"))

df.quality.30$Target <-factor(df.quality.30$Target, levels=c("PVR 30%", "Carbon 30%", "Habitat 30%","Combined 30%"))

new_labels <- c("Agricultural Productivity", "Climate Adaptation", "Wildlife Habitat", "Combined Ecosystem Services")

# Plot with modified x-axis labels

Quality<-ggplot(df.quality.30, aes(x = Target, fill = Quality)) +
  geom_bar(aes(y = Perc_Quality), stat = "identity", position = "dodge") +
  labs(x = "Protection Scenario", y = "Percent Protected at 30% Targets (%)", fill = "Agricultural Land Quality") +
  scale_fill_manual(values = c("#aeac4c","#788f33","#165d43")) +
  scale_x_discrete(labels = new_labels) + # Setting custom x-axis labels
  theme_classic()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    theme(
    axis.text = element_text(size = 12),   # Adjust the font size for tick labels
    axis.title = element_text(size = 14)   # Adjust the font size for axis titles
  )

  

plotAG<-plot_grid(AgLand,Quality, ncol=2, align="h")
```

## Ecosystem Services Percent 

```{r}
#Combined ES Scenario 
ES <- data.frame(perc_protected=unlist(sol.table[,stringr::str_which(names(sol.table),"percent_ES")]),
                 target=unlist(sol.table[,stringr::str_which(names(sol.table),"target")]),
                 ES=stringr::str_extract(names(unlist(sol.table[,stringr::str_which(names(sol.table),"percent_ES")])), pattern="[:digit:]"),
                 cost=sol.table$cost_bil,
                 run.num=1:nrow(sol.table))
df.aggregate.ES<-ES %>%
  mutate(ES=recode(ES, 
                        '1'="Carbon Sequestration", 
                        '2'="Habitat Quality",
                        '3'="Nitrogen Retention", 
                        '4' = "Recreation", 
                        '5' = "PVR"))

#write.csv(df.aggregate.ES, paste0(Folder,"Chapter3/OutputTables/ESpercent_combined.csv"))
```

```{r}
#PVR Scenario 
ES.rasters<-stack(ES_rast1km.r[[1]], ES_rast1km.r[[3]], ES_rast1km.r[[4]], ES_rast1km.r[[6]])
stack.pvr.ES<-stack(stack.pvr, ES.rasters)
df.pvr.ES<-as.data.frame(na.omit(values(stack.pvr.ES))) 

Tot.ES<-t(df.pvr.ES[10:13] %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))))
variable <- rownames(Tot.ES)
  rownames(Tot.ES) <- NULL
  Tot.ES<- as.data.frame(cbind(Tot.ES,variable))

df.pvr.ES.melt<-melt(df.pvr.ES, id=c("tot_c_fut_weight", "reten_ratio", "quality_f_02", "X02_recreation_2016sum"))
df.pvr.ES.melt<-df.pvr.ES.melt %>%
  filter(value == 1)

df.pvr.ES.melt<-melt(df.pvr.ES.melt, id="variable")
colnames(df.pvr.ES.melt)<-c("solution", "variable", "value")

df.aggregate.pvr.ES<-aggregate(value ~ variable + solution, data=df.pvr.ES.melt, FUN=sum)

df.aggregate.pvr.ES<-left_join(df.aggregate.pvr.ES, Tot.ES, by="variable")
df.aggregate.pvr.ES$Perc_ES<-df.aggregate.pvr.ES$value/as.numeric(df.aggregate.pvr.ES$V1)*100
df.aggregate.pvr.ES<-na.omit(df.aggregate.pvr.ES)

df.aggregate.pvr.ES<-df.aggregate.pvr.ES %>%
  mutate(solution=recode(solution, 
                        'cost.2'="5%", 
                        'cost.3'="10%",
                        'cost.4'="15%", 
                        'cost.5' = "20%", 
                        'cost.6' = "25%",
                        'cost.7'= "30%", 
                        'cost.8'= "35%",
                        'cost.9'="40%"))

write.csv(df.aggregate.pvr.ES, paste0(Folder,"Chapter3/OutputTables/ESpercent_agriculture.csv"))



```

```{r}
#Climate Scenario 
ES.carbon.rasters<-stack(ES_rast1km.r[[1]], ES_rast1km.r[[3]], ES_rast1km.r[[4]], ES_rast1km.r[[6]], raster(PVR_TV.s))
stack.carbon.ES<-stack(stack.carbon, ES.carbon.rasters)
df.carbon.ES<-as.data.frame(na.omit(values(stack.carbon.ES))) 

Tot.carbon.ES<-t(df.carbon.ES[10:14] %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))))
variable <- rownames(Tot.carbon.ES)
  rownames(Tot.carbon.ES) <- NULL
  Tot.carbon.ES<- as.data.frame(cbind(Tot.carbon.ES,variable))

df.carbon.ES.melt<-melt(df.carbon.ES, id=c("tot_c_fut_weight", "reten_ratio", "quality_f_02", "X02_recreation_2016sum", "PVR"))
df.carbon.ES.melt<-df.carbon.ES.melt %>%
  filter(value == 1)

df.carbon.ES.melt<-melt(df.carbon.ES.melt, id="variable")
colnames(df.carbon.ES.melt)<-c("solution", "variable", "value")

df.aggregate.carbon.ES<-aggregate(value ~ variable + solution, data=df.carbon.ES.melt, FUN=sum)

df.aggregate.carbon.ES<-left_join(df.aggregate.carbon.ES, Tot.carbon.ES, by="variable")
df.aggregate.carbon.ES$Perc_ES<-df.aggregate.carbon.ES$value/as.numeric(df.aggregate.carbon.ES$V1)*100
df.aggregate.carbon.ES<-na.omit(df.aggregate.carbon.ES)

df.aggregate.carbon.ES<-df.aggregate.carbon.ES %>%
  mutate(solution=recode(solution, 
                        'cost.2'="5%", 
                        'cost.3'="10%",
                        'cost.4'="15%", 
                        'cost.5' = "20%", 
                        'cost.6' = "25%",
                        'cost.7'= "30%", 
                        'cost.8'= "35%",
                        'cost.9'="40%"))

#write.csv(df.aggregate.carbon.ES, paste0(Folder,"Chapter3/OutputTables/ESpercent_climate.csv"))
```

```{r}
#Wildlife Habitat Scenario 
ES.habitat.rasters<-stack(ES_rast1km.r[[1]], ES_rast1km.r[[3]], ES_rast1km.r[[4]], ES_rast1km.r[[6]], raster(PVR_TV.s))
stack.habitat.ES<-stack(stack.habitat, ES.habitat.rasters)
df.habitat.ES<-as.data.frame(na.omit(values(stack.habitat.ES))) 

Tot.habitat.ES<-t(df.habitat.ES[10:14] %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))))
variable <- rownames(Tot.habitat.ES)
  rownames(Tot.habitat.ES) <- NULL
  Tot.habitat.ES<- as.data.frame(cbind(Tot.habitat.ES,variable))

df.habitat.ES.melt<-melt(df.habitat.ES, id=c("tot_c_fut_weight", "reten_ratio", "quality_f_02", "X02_recreation_2016sum", "PVR"))
df.habitat.ES.melt<-df.habitat.ES.melt %>%
  filter(value == 1)

df.habitat.ES.melt<-melt(df.habitat.ES.melt, id="variable")
colnames(df.habitat.ES.melt)<-c("solution", "variable", "value")

df.aggregate.habitat.ES<-aggregate(value ~ variable + solution, data=df.habitat.ES.melt, FUN=sum)

df.aggregate.habitat.ES<-left_join(df.aggregate.habitat.ES, Tot.habitat.ES, by="variable")
df.aggregate.habitat.ES$Perc_ES<-df.aggregate.habitat.ES$value/as.numeric(df.aggregate.habitat.ES$V1)*100
df.aggregate.habitat.ES<-na.omit(df.aggregate.habitat.ES)

df.aggregate.habitat.ES<-df.aggregate.habitat.ES %>%
  mutate(solution=recode(solution, 
                        'cost.2'="5%", 
                        'cost.3'="10%",
                        'cost.4'="15%", 
                        'cost.5' = "20%", 
                        'cost.6' = "25%",
                        'cost.7'= "30%", 
                        'cost.8'= "35%",
                        'cost.9'="40%"))

#write.csv(df.aggregate.habitat.ES, paste0(Folder,"Chapter3/OutputTables/ESpercent_habitat.csv")) 
```

## Solution Maps

```{r}
#---------------------------------------------------#
#ES Solution 
#Select solution to plot and turn into raster 
solutions.ES.30<-raster::raster(solutions[[2]][[7]])
   
#convert to dataframe
df.solutions.ES.30<-as.data.frame(solutions.ES.30, xy=TRUE)
colnames(df.solutions.ES.30)<-c("x","y", "value") 
df.solutions.ES.30$value<-as.factor(df.solutions.ES.30$value)


df.solutions.ES.30<-na.omit(df.solutions.ES.30)
  

#convert locked.out to dataframe
df.locked.out<-as.data.frame(raster::raster(locked.out), xy=TRUE) %>%
  na.omit()
df.locked.out$GAP_Sts<-as.factor(df.locked.out$GAP_Sts)


ES_solution<-ggplot()+
  geom_tile(data=df.solutions.ES.30, 
              aes(x=x, y=y, 
                  fill=value))+
  scale_fill_manual(values= c("gray","#788f33"), name="Priority Area", labels=c("Not Selected", "Selected")) +
  new_scale_fill()+
  geom_tile(data=df.locked.out, aes(x=x, y=y, fill="Gap_Sts"))+
  scale_fill_manual(values="#aeac4c", name="Current Protected Area", labels=c(""))+
  geom_sf(data=StudyArea.sf, fill=NA, color="black", linewidth=1)+
  ggtitle("Combined Ecosystem Services")+
  theme_void()+
  theme(panel.border = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank())
#---------------------------------------------------#

#----------------------------------------------------#

#PVR 
solutions.pvr.30<-raster::raster(solutions.pvr[[2]][[7]])


#convert to dataframe
df.pvr.30<-as.data.frame(solutions.pvr.30, xy=TRUE)
colnames(df.pvr.30)<-c("x","y", "value") 
df.pvr.30$value<-as.factor(df.pvr.30$value)


df.pvr.30<-na.omit(df.pvr.30)

PVR_solution<-ggplot()+
  geom_tile(data=df.pvr.30, 
              aes(x=x, y=y, 
                  fill=value))+
  scale_fill_manual(values= c("gray","#788f33"), name="Priority Area", labels=c("Not Selected", "Selected")) +
  new_scale_fill()+
  geom_tile(data=df.locked.out, aes(x=x, y=y, fill="Gap_Sts"))+
  scale_fill_manual(values="#aeac4c", name="Current Protected Area", labels=c(""))+
  geom_sf(data=StudyArea.sf, fill=NA, color="black", linewidth=1)+
  ggtitle("Agricultural Productivity")+
  theme_void()+
  theme(panel.border = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank())
#---------------------------------------------------#


#---------------------------------------------------#
#Carbon Solution 
solutions.carbon.30<-raster::raster(solutions.carbon[[2]][[7]])

#convert to dataframe
df.carbon.30<-as.data.frame(solutions.carbon.30, xy=TRUE)
colnames(df.carbon.30)<-c("x","y", "value") 
df.carbon.30$value<-as.factor(df.carbon.30$value)


df.carbon.30<-na.omit(df.carbon.30)

Carbon_solution<-ggplot()+
  geom_tile(data=df.carbon.30, 
              aes(x=x, y=y, 
                  fill=value))+
  scale_fill_manual(values= c("gray","#788f33"), name="Priority Area", labels=c("Not Selected", "Selected")) +
  new_scale_fill()+
  geom_tile(data=df.locked.out, aes(x=x, y=y, fill="Gap_Sts"))+
  scale_fill_manual(values="#aeac4c", name="Current Protected Area", labels=c(""))+
  geom_sf(data=StudyArea.sf, fill=NA, color="black", linewidth=1)+
  ggtitle("Climate Adaptation")+
  theme_void()+
  theme(panel.border = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank())
#----------------------------------------------------#

#---------------------------------------------------#
#Habitat Solution 
solutions.habitat.30<-raster::raster(solutions.habitat[[2]][[7]])

#convert to dataframe
df.habitat.30<-as.data.frame(solutions.habitat.30, xy=TRUE)
colnames(df.habitat.30)<-c("x","y", "value") 
df.habitat.30$value<-as.factor(df.habitat.30$value)


df.habitat.30<-na.omit(df.habitat.30)

Habitat_solution<-ggplot()+
  geom_tile(data=df.habitat.30, 
              aes(x=x, y=y, 
                  fill=value))+
  scale_fill_manual(values= c("gray","#788f33"), name="Priority Area", labels=c("Not Selected", "Selected")) +
  new_scale_fill()+
  geom_tile(data=df.locked.out, aes(x=x, y=y, fill="Gap_Sts"))+
  scale_fill_manual(values="#aeac4c", name="Current Protected Area", labels=c(""))+
  geom_sf(data=StudyArea.sf, fill=NA, color="black", linewidth=1)+
  ggtitle("Wildlife Habitat")+
  theme_void()+
  theme(panel.border = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank())
#---------------------------------------------------#
#Overlapping pixels 
overlap<-solutions.habitat.30+solutions.carbon.30+solutions.pvr.30+solutions.ES.30

#convert to dataframe
df.overlap<-as.data.frame(overlap, xy=TRUE)
colnames(df.overlap)<-c("x","y", "value") 
df.overlap$value<-as.factor(df.overlap$value)


df.overlap<-na.omit(df.overlap)


overlap<-ggplot()+
  geom_tile(data=df.overlap, 
              aes(x=x, y=y, 
                  fill=value))+
  scale_fill_manual(values= c("gray","#414487FF", "#2A788EFF","#7AD151FF", "#FDE725FF"), name="Priority Area", labels=c("Not Selected", "Selected in 1 Scenario", "Selected in 2 Scenarios", "Selected in 3 Scenarios", "Selected in ALL Scenarios")) +
  new_scale_fill()+
  geom_tile(data=df.locked.out, aes(x=x, y=y, fill="Gap_Sts"))+
  scale_fill_manual(values="#aeac4c", name="Current Protected Area", labels=c(""))+
  geom_sf(data=StudyArea.sf, fill=NA, color="black", linewidth=1)+
  ggtitle("Overlap Between")+
  theme_void()+
  theme(panel.border = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank())

library(patchwork)
Solutions<-PVR_solution+Carbon_solution+Habitat_solution+ES_solution+overlap
```

## Combined Biodiversity and Climate Index

Suraci JP, Farwell LS, Littlefield CE, Freeman PT, Â Zachmann LJ, Landau VA, Anderson JJ, Dickson BG. 2023. Achieving conservation targets by jointly addressing climate change and biodiversity loss. *Ecosphere*

https://figshare.com/articles/dataset/Data_from_Suraci_et_al_2023_Ecosphere/22197592/1?file=39450403

```{r}
#Load Data 
combined_index<-terra::rast(paste0(Folder, "Data/Suraci2023/conus-combined-index.tif"))

combined_index<-terra::project(combined_index, new.ras)

combined_index.tv<-terra::crop(combined_index, StudyArea.sf)
combined_index.tv<-terra::mask(combined_index.tv, StudyArea.sf)


Quantile_combined.i<-global(combined_index.tv, fun=quantile, na.rm=TRUE) # >-1.82

#Combined ES Scenario 
solutions.ES.30[solutions.ES.30!=1]<-NA

solutions.ES.30.p<-rasterToPolygons(solutions.ES.30, dissolve=TRUE) #convert to polygon
solutions.ES.30.p<-vect(solutions.ES.30.p) #convert to spatvector 

combined.solutions.30<-terra::extract(combined_index.tv, solutions.ES.30.p)
colnames(combined.solutions.30)<-c("Pixel","combined_index")

combined.hv<-combined.solutions.30 %>%
  filter(combined_index > -1.82)


average_combined<-mean(combined.solutions.30$combined_index)# average index value 

ES.combined.sum<-sum(combined.hv$Pixel)/sum(combined.solutions.30$Pixel)*100 #10.40% or 70 pixels 

#PVR Scenario
solutions.pvr.30[solutions.pvr.30!=1]<-NA
solutions.pvr.30.p<-rasterToPolygons(solutions.pvr.30, dissolve=TRUE) #convert to polygon
solutions.pvr.30.p<-vect(solutions.pvr.30.p) #convert to spatvector 

combined.pvr.solutions.30<-terra::extract(combined_index.tv, solutions.pvr.30.p)
colnames(combined.pvr.solutions.30)<-c("Pixel","combined_index")


combined.pvr.hv<-combined.pvr.solutions.30 %>%
  filter(combined_index > -1.82)

pvr.average_combined<-mean(combined.pvr.solutions.30$combined_index)

pvr.combined.sum<-sum(combined.pvr.hv$Pixel)/sum(combined.pvr.solutions.30$Pixel)*100 #0% or 0 pixels 

#Climate Scenario
solutions.carbon.30[solutions.carbon.30!=1]<-NA
solutions.climate.30.p<-rasterToPolygons(solutions.carbon.30, dissolve=TRUE) #convert to polygon
solutions.climate.30.p<-vect(solutions.climate.30.p) #convert to spatvector 

combined.climate.solutions.30<-terra::extract(combined_index.tv, solutions.climate.30.p)
colnames(combined.climate.solutions.30)<-c("Pixel","combined_index")

combined.climate.hv<-combined.climate.solutions.30 %>%
  filter(combined_index > -1.82)

climate.combined.sum<-sum(combined.climate.hv$Pixel)/sum(combined.climate.solutions.30$Pixel)*100 #10.34% or 69 pixels 

climate.average_combined<-mean(combined.climate.solutions.30$combined_index)


#Habitat 
solutions.habitat.30[solutions.habitat.30!=1]<-NA
solutions.habitat.30.p<-rasterToPolygons(solutions.habitat.30, dissolve=TRUE) #convert to polygon
solutions.habitat.30.p<-vect(solutions.habitat.30.p) #convert to spatvector 

combined.habitat.solutions.30<-terra::extract(combined_index.tv, solutions.habitat.30.p)
colnames(combined.habitat.solutions.30)<-c("Pixel","combined_index")

habitat.average_combined<-mean(combined.habitat.solutions.30$combined_index)

combined.habitat.hv<-combined.habitat.solutions.30 %>%
  filter(combined_index > -1.82)

habitat.combined.sum<-sum(combined.habitat.hv$Pixel)/sum(combined.habitat.solutions.30$Pixel)*100 #15.40% or 95 pixels 

habitat.combined.pixel<-sum(combined.habitat.hv$Pixel)


```

## Climate Index

```{r}
climate_index<-terra::rast(paste0(Folder, "Data/Suraci2023/conus-climate-index.tif"))

climate_index<-terra::project(climate_index, new.ras)

climate_index.tv<-terra::crop(climate_index, StudyArea.sf)
climate_index.tv<-terra::mask(climate_index.tv, StudyArea.sf)

Quantile_climate.i<-global(climate_index.tv, fun=quantile, na.rm=TRUE) # >-1.79

#Combined ES Scenario 
climate.solutions.30<-terra::extract(climate_index.tv, solutions.ES.30.p)
colnames(climate.solutions.30)<-c("Pixel","combined_index")

average_climate<-mean(climate.solutions.30$combined_index)

climate.combined.hv<-climate.solutions.30 %>%
  filter(combined_index > -1.79)

sum(climate.combined.hv$Pixel)/sum(climate.solutions.30$Pixel)*100 #18.7% or 126 pixels 

#PVR Scenario

climate.pvr.solutions.30<-terra::extract(climate_index.tv, solutions.pvr.30.p)
colnames(climate.pvr.solutions.30)<-c("Pixel","combined_index")

pvr.average_climate<-mean(climate.pvr.solutions.30$combined_index)

climate.pvr.hv<-climate.pvr.solutions.30 %>%
  filter(combined_index > -1.79)

sum(climate.pvr.hv$Pixel)/sum(climate.pvr.solutions.30$Pixel)*100 #13.41 or 61 pixels 

#Climate Scenario
climate.climate.solutions.30<-terra::extract(climate_index.tv, solutions.climate.30.p)
colnames(climate.climate.solutions.30)<-c("Pixel","combined_index")

carbon.average_climate<-mean(climate.climate.solutions.30$combined_index)

climate.climate.hv<-climate.climate.solutions.30 %>%
  filter(combined_index > -1.79)

sum(climate.climate.hv$Pixel)/sum(climate.climate.solutions.30$Pixel)*100 #24.59 or 164 pixels 

#Habitat 

climate.habitat.solutions.30<-terra::extract(climate_index.tv, solutions.habitat.30.p)
colnames(climate.habitat.solutions.30)<-c("Pixel","combined_index")

habitat.average_climate<-mean(climate.habitat.solutions.30$combined_index)

climate.habitat.hv<-climate.habitat.solutions.30 %>%
  filter(combined_index > -1.79)

sum(climate.habitat.hv$Pixel)/sum(climate.habitat.solutions.30$Pixel)*100 #21.72 or 134
```

## Biodiversity Index

```{r}
biodiversity_index<-terra::rast(paste0(Folder, "Data/Suraci2023/conus-biodiversity-index.tif"))

biodiversity_index<-terra::project(biodiversity_index, new.ras)

biodiversity_index.tv<-terra::crop(biodiversity_index, StudyArea.sf)
biodiversity_index.tv<-terra::mask(biodiversity_index.tv, StudyArea.sf)

Quantile_biodiversity.i<-global(biodiversity_index.tv, fun=quantile, na.rm=TRUE) # >-0.34

#Combined ES Scenario 
biodiversity.solutions.30<-terra::extract(biodiversity_index.tv, solutions.ES.30.p)
colnames(biodiversity.solutions.30)<-c("Pixel","combined_index")

average_biodiversity<-mean(biodiversity.solutions.30$combined_index)

biodiversity.hv<-biodiversity.solutions.30 %>%
  filter(combined_index > -0.34)

sum(biodiversity.hv$Pixel)/sum(biodiversity.solutions.30$Pixel)*100 #17.09 or 115

#PVR Scenario

biodiversity.pvr.solutions.30<-terra::extract(biodiversity_index.tv, solutions.pvr.30.p)
colnames(biodiversity.pvr.solutions.30)<-c("Pixel","combined_index")

pvr.average_biodiversity<-mean(biodiversity.pvr.solutions.30$combined_index)

biodiversity.pvr.hv<-biodiversity.pvr.solutions.30 %>%
  filter(combined_index > -0.34)

sum(biodiversity.pvr.hv$Pixel)/sum(biodiversity.pvr.solutions.30$Pixel)*100 #0 or 0 

#Climate Scenario
biodiversity.climate.solutions.30<-terra::extract(biodiversity_index.tv, solutions.climate.30.p)
colnames(biodiversity.climate.solutions.30)<-c("Pixel","combined_index")

carbon.average_biodiversity<-mean(biodiversity.climate.solutions.30$combined_index)

biodiversity.climate.hv<-biodiversity.climate.solutions.30 %>%
  filter(combined_index > -0.34)

sum(biodiversity.climate.hv$Pixel)/sum(biodiversity.climate.solutions.30$Pixel)*100 #16.49 or 110 

#Habitat 

biodiversity.habitat.solutions.30<-terra::extract(biodiversity_index.tv, solutions.habitat.30.p)
colnames(biodiversity.habitat.solutions.30)<-c("Pixel","combined_index")

habitat.average_biodiversity<-mean(biodiversity.habitat.solutions.30$combined_index)

biodiversity.habitat.hv<-biodiversity.habitat.solutions.30 %>%
  filter(combined_index > -0.34)

sum(biodiversity.habitat.hv$Pixel)/sum(biodiversity.habitat.solutions.30$Pixel)*100 #21.56 or 133
```

## INDEX plots

```{r}
index_rasters<-list(combined_index.tv, climate_index.tv, biodiversity_index.tv)

# Create a vector of new layer names
index_names_list <- c("Combined", "Climate", "Biodiversity")

# Use a for loop to rename the layer names of each raster in the list
for (i in 1:length(index_rasters)) {
  names(index_rasters[[i]]) <- index_names_list[[i]]
}


# Function to plot a raster using ggplot with specified layer name
plot_raster <- function(raster, layer_names, study_area) {
  df <- as.data.frame(raster, xy = TRUE)
  theme_set(theme_void())  # Override default theme settings
  ggplot() +
    geom_raster(data=df, aes(x = x, y = y, fill = .data[[layer_names]])) +
    geom_sf(data = study_area, fill = NA, color = "black", size = 2) +  # Add the geom_sf layer
    theme(
      panel.background = element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      axis.title = element_blank()
    ) +
    scale_fill_viridis()
}

# Plot each raster with different layer names using a for loop
plot_list <- list()
for (i in 1:length(index_rasters)) {
  raster <- index_rasters[[i]]
  layer_names <- index_names_list[[i]]
  
  raster_plots <- list()
  for (j in 1:length(layer_names)) {
    layer_name <- layer_names[j]
    raster_plots[[j]] <- plot_raster(raster, layer_name, StudyArea.sf)  # Pass StudyArea.sf as an argument
  }
  
  plot_list[[i]] <- raster_plots
}

plots.index <- lapply(plot_list, wrap_plots, nrow = 1)
index_plots <- wrap_plots(plots.index)
print(index_plots) 
```

##  Bar graphs for index values

```{r}
Scenario<-c("Agricultural Productivity", "Climate Adaptation", "Wildlife Habitat", "Combined Ecosystem Services")

#these numbers are taken from caluclations done above under each index 
Percent.combined<-c(0,10.34,15.4,10.4)
Percent.climate<-c(13.41,24.59, 21.72, 18.7)
Percent.biodiversity<-c(0, 16.49, 21.56,17.09)

df.percent<-as.data.frame(cbind(Scenario, Percent.combined, Percent.climate, Percent.biodiversity))

df.percent.melt<-melt(df.percent, id="Scenario")

df.percent.melt$Scenario<-factor(df.percent.melt$Scenario, levels=c("Agricultural Productivity", "Climate Adaptation", "Wildlife Habitat","Combined Ecosystem Services"))

df.percent.melt$value<-as.numeric(df.percent.melt$value)

blues<-c("#bdd7e7","#6baed6", "#2171b5")

PercentIndex<-ggplot(df.percent.melt, aes(x = Scenario, fill=variable)) +
  geom_bar(aes(y = value), stat = "identity", position = "dodge") +
  labs(x = "Protection Scenario", y = "Percent High Conservation Value (%)", fill = "Conservation Index") +
  scale_fill_manual(values=blues, labels = c("Combined", "Climate", "Biodiversity"))+
  theme_classic()+
  theme(axis.text.x = element_text(angle = 35, hjust = 1))+theme(
    axis.text = element_text(size = 12),   # Adjust the font size for tick labels
    axis.title = element_text(size = 14)   # Adjust the font size for axis titles
  )

#--------------------------------#
pixel.combined<-c(0,69,95,70)
pixel.climate<-c(61,164,134,126)
pixel.biodiversity<-c(0,110,133,115)

df.pixel<-as.data.frame(cbind(Scenario, pixel.combined, pixel.climate, pixel.biodiversity))

df.pixel.melt<-melt(df.pixel, id="Scenario")

df.pixel.melt$Scenario<-factor(df.pixel.melt$Scenario, levels=c("Agricultural Productivity", "Climate Adaptation", "Wildlife Habitat", "Combined Ecosystem Services"))

df.pixel.melt$value<-as.numeric(df.pixel.melt$value)

PixelIndex<-ggplot(df.pixel.melt, aes(x = Scenario, fill=variable)) +
  geom_bar(aes(y = value), stat = "identity", position = "dodge") +
  labs(x = "Protection Scenario", y = "Number of High Conservation Value", fill = "Conservation Index") +
 scale_fill_manual(values=blues, labels = c("Combined", "Climate", "Biodiversity"))+
  theme_classic()+
  theme(axis.text.x = element_text(angle = 35, hjust = 1))+
  theme(
    axis.text = element_text(size = 12),   # Adjust the font size for tick labels
    axis.title = element_text(size = 14)   # Adjust the font size for axis titles
  )

ConservationValue<-PercentIndex+PixelIndex
```

## Bar graphs for ecosystem services

```{r}
 Scenario<-c("Agricultural Productivity", "Combined Ecosystem Services", "Climate", "Wildlife Habitat")

EcosystemServices<-c("Carbon Storage", "Habitat Quality", "Nitrogen Retention","Recreation","Food Production Potential")

#these numbers are taken from caluclations done above
Percent.Ag<-c(7,9,20,6,30) 
Percent.climateAd<-c(30,36,29,31,30) 
Percent.wildlife<-c(27, 30, 27, 24,30) 
Percent.ESc<-c(30,35,30,33,30)


df.percent.ES<-as.data.frame(cbind(EcosystemServices,Percent.Ag, Percent.climateAd, Percent.wildlife, Percent.ESc))

df.percent.ES$EcosystemServices<-factor(df.percent.ES$EcosystemServices, levels=c("Food Production Potential","Carbon Storage", "Habitat Quality", "Recreation", "Nitrogen Retention"))

df.ESp.melt<-melt(df.percent.ES, id="EcosystemServices")
df.ESp.melt$value<-as.numeric(df.ESp.melt$value)

facet_labels <- c(
  "Percent.Ag" = "Agricultural Productivity",
  "Percent.climateAd" = "Climate Adaptation",
  "Percent.wildlife" = "Wildlife Habitat",
  "Percent.ESc" = "Combined Ecosystem Services"
)

viridis_palette <- viridis(5)
palette<-c("#3B9AB2", "#78B7C5","#EBCC2A","#E1AF00","#F21A00")

ESPercent_Facet<-ggplot(df.ESp.melt, aes(x = EcosystemServices, fill=EcosystemServices)) +
  geom_bar(aes(y = value), stat = "identity", position = "dodge") +
  labs(x = "Ecosystem Services", y = "Percent of Ecosystem Service   Protected (%)", fill = "Ecosystem Services") +
scale_fill_manual(values =palette, labels = c("Food Production Potential","Carbon Storage", "Habitat Quality", "Recreation", "Nitrogen Retention"))+
facet_grid(rows = vars(variable), labeller = labeller(variable = facet_labels))+
  theme_classic()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(
    axis.text = element_text(size = 12),   # Adjust the font size for tick labels
    axis.title = element_text(size = 14)   # Adjust the font size for axis titles
  )

```
